[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "aiohttp-mcp"
version = "0.0.1"
description = "Tools for building Model Context Protocol (MCP) servers on top of aiohttp"
readme = "README.md"
requires-python = ">=3.10"
license = "MIT"
authors = [
    { name = "Taras Drapalyuk", email = "taras@drapalyuk.com" }
]
dependencies = [
    "aiohttp>=3.9.0",
    "aiohttp-sse>=2.2.0",
    "mcp>=1.6.0",
]
keywords = [
    "mcp",
    "model-context-protocol",
    "aiohttp",
    "ai",
    "llm",
    "server",
    "async",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

[project.urls]
Homepage = "https://github.com/kulapard/aiohttp-mcp"
Repository = "https://github.com/kulapard/aiohttp-mcp.git"
Documentation = "https://github.com/kulapard/aiohttp-mcp#readme"

[tool.hatch.build.targets.wheel]
packages = ["aiohttp_mcp"]

[tool.hatch.build.targets.sdist]
include = [
    "aiohttp_mcp/**/*.py",
    "README.md",
    "LICENSE",
]

[dependency-groups]
dev = [
    "mypy>=1.15.0",
    "python-dotenv>=1.1.0",
    "anthropic>=0.49.0",
    "httpx>=0.28.1",
    "mcp[cli]>=1.6.0",
    "rich>=14.0.0",
    "pip>=25.0.1",
]

[tool.hatch.build]
only-packages = true

[tool.mypy]
strict = true
install_types = true
non_interactive = true

[tool.ruff]
line-length = 120

[tool.ruff.lint]
select = [
    "RUF", # ruff
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "F", # pyflakes
    "I", # isort
    "C", # flake8-comprehensions
    "B", # flake8-bugbear
    "G", # flake8-logging-format
    "T20", # flake8-print
    "UP", # pyupgrade
]
[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 60

[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
addopts = "--cov=aiohttp_mcp --cov-branch --cov-report term:skip-covered"

[tool.codespell]
skip = '.git,*.pdf,*.svg,Makefile,.venv,_build'

[tool.coverage.run]
branch = true

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    # Don't complain about code that is only run in type checking:
    "if TYPE_CHECKING",
    "assert False",
    ": \\.\\.\\.(\\s*#.*)?$",
    "^ +\\.\\.\\.$",
]
